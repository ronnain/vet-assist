// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider            = "zod-prisma-types"
  useMultipleFiles    = true
  writeBarrelFiles    = true
  output              = "../../../../../../libs/zod-types-from-prisma/src/lib"
}

// todo add constraints cascade delete
// TODO HANDLE PUSH NOTIFICATION RECEIVED BY USER

model User { // todo ckreck on may if more info are needed
  id                      Int               @id @default(autoincrement())
  email                   String            @unique
  firstName               String
  lastName                String
  phone                   String            @unique
  role                    UserRoleEnum      @default(CUSTOMER)
  authorMessages          Message[]         @relation("author")
  firstTimeReadMessages   ReadAt[]          @relation("firstTimeReadMessage")
  conversations           Conversation[]
  pets                    Pet[]
}

model Message {
  id                    Int        @id @default(autoincrement())
  storedAt              DateTime   @default(now())
  content               String
  type                  MessageTypeEnum
  author                User       @relation("author", fields: [authorId], references: [id])
  authorId              Int
  recipientsFirstTimeRead    ReadAt[] // A message may be read by several staff users
  conversation          Conversation? @relation(fields: [conversationId], references: [id])
  conversationId        Int?
}

model Conversation {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  type      ConversationType // REPOEN WHEN A NEW MESSAGE IS SENT FROM CUSTOMER
  messages  Message[]
  users     User[]
}

enum ConversationType {
  CLOSED
  OPEN
}

model ReadAt {
  id         Int        @id @default(autoincrement())
  readAt     DateTime   @default(now())
  user       User       @relation("firstTimeReadMessage", fields: [userId], references: [id])
  userId     Int
  message    Message    @relation(fields: [messageId], references: [id])
  messageId  Int
}

enum Recipient {
  STAFF
  CUSTOMER
}

enum UserRoleEnum {
  CUSTOMER
  ADMIN
  CUSTOMER_SUPPORT
}

enum MessageTypeEnum {
  TEXT
  IMAGE_URL
  VIDEO_URL
  AUDIO_URL
  DOCUMENT_URL
}

model Pet {
  id        Int      @id @default(autoincrement())
  name      String
  type      PetType
  specificType String  /// Precision about the race...
  gender  PetGender
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PetType {
  CAT
  DOG
  RODENT
  TURTLE
  TORTOISE
  SNAKE
  LIZARD
  FISH
  BIRD
  INSECT
}

enum PetGender {
  MALE
  FEMALE
  UNKNOWN
  OTHER
}